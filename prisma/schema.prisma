// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
}

datasource db {
  provider          = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  relationMode      = "prisma"
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String         @id @default(cuid())
  name          String?
  email         String?        @unique
  emailVerified DateTime?
  image         String?
  role          String         @default("user")
  accounts      Account[]
  sessions      Session[]
  Registered    Registered[]
  PaymentOrder  PaymentOrder[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Events {
  id              Int            @id @default(autoincrement())
  title           String
  description     String
  date            DateTime
  location        String
  banner          String
  images          Json?
  registrationFee Float
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  Registered      Registered[]
  PaymentOrder    PaymentOrder[]
}

model Registered {
  id             Int           @id @default(autoincrement())
  userId         String
  eventId        Int
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  event          Events        @relation(fields: [eventId], references: [id], onDelete: Cascade)
  paymentOrder   PaymentOrder? @relation(fields: [paymentOrderId], references: [id], onDelete: Cascade)
  paymentOrderId Int?          @unique

  @@index([eventId])
  @@index([userId])
}

model PaymentOrder {
  id          Int         @id @default(autoincrement())
  orderId     String      @unique
  captured    Boolean     @default(false)
  paymentInfo Json?
  userId      String
  eventId     Int
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  event       Events      @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  Registered  Registered?

  @@index([userId])
  @@index([eventId])
  @@index([orderId])
}
